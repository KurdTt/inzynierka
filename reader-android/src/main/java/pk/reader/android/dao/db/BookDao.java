package pk.reader.android.dao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import pk.reader.entities.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BOOK.
*/
public class BookDao extends AbstractDao<Book, String> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Author = new Property(0, String.class, "Author", false, "AUTHOR");
        public final static Property ISBN = new Property(1, String.class, "ISBN", true, "ISBN");
        public final static Property Title = new Property(2, String.class, "Title", false, "TITLE");
        public final static Property ShortDescription = new Property(3, String.class, "ShortDescription", false, "SHORT_DESCRIPTION");
        public final static Property LongDescription = new Property(4, String.class, "LongDescription", false, "LONG_DESCRIPTION");
        public final static Property ListImage = new Property(5, String.class, "ListImage", false, "LIST_IMAGE");
        public final static Property ImageLink = new Property(6, String.class, "ImageLink", false, "IMAGE_LINK");
    };


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BOOK' (" + //
                "'AUTHOR' TEXT," + // 0: Author
                "'ISBN' TEXT PRIMARY KEY NOT NULL ," + // 1: ISBN
                "'TITLE' TEXT," + // 2: Title
                "'SHORT_DESCRIPTION' TEXT," + // 3: ShortDescription
                "'LONG_DESCRIPTION' TEXT," + // 4: LongDescription
                "'LIST_IMAGE' TEXT," + // 5: ListImage
                "'IMAGE_LINK' TEXT);"); // 6: ImageLink
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BOOK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        String Author = entity.getAuthor();
        if (Author != null) {
            stmt.bindString(1, Author);
        }
 
        String ISBN = entity.getISBN();
        if (ISBN != null) {
            stmt.bindString(2, ISBN);
        }
 
        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(3, Title);
        }
 
        String ShortDescription = entity.getShortDescription();
        if (ShortDescription != null) {
            stmt.bindString(4, ShortDescription);
        }
 
        String LongDescription = entity.getLongDescription();
        if (LongDescription != null) {
            stmt.bindString(5, LongDescription);
        }
 
        String ListImage = entity.getListImage();
        if (ListImage != null) {
            stmt.bindString(6, ListImage);
        }
 
        String ImageLink = entity.getImageLink();
        if (ImageLink != null) {
            stmt.bindString(7, ImageLink);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Author
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ISBN
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ShortDescription
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // LongDescription
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ListImage
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // ImageLink
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setAuthor(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setISBN(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShortDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLongDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setListImage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImageLink(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Book entity, long rowId) {
        return entity.getISBN();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Book entity) {
        if(entity != null) {
            return entity.getISBN();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
